[poppy]

# Should PSF calculations run in parallel using multiple processers using the
# Python multiprocessing framework (if True; faster but does not allow display
# of each wavelength) or run serially in a single process(if False; slower but
# shows the calculation in progress. Also a bit more robust.?)
# use_multiprocessing = False

# Maximum number of additional worker processes to spawn. PSF calculations are
# likely RAM limited more than CPU limited for higher N on modern machines.
# n_processes = 4

# Use FFTW for FFTs (assuming it is available)?  Set to False to force
# numpy.fft always, True to try importing and using FFTW via PyFFTW.
# use_fftw = True

# Use cuda for FFTs (assuming it is available)?  Set to False to use
# numpy.fft or PyFFTW.
#use_cuda = False

# Use NumExpr for processor intensive math? Otherwise use
# numpy always, True to try importing NumExpr
#use_numexpr = False

# Should POPPY automatically save and reload FFTW "wisdom" for improved speed?
#autosave_fftw_wisdom = True

# Default image display field of view, in arcseconds. Adjust this to display
# only a subregion of a larger output array.
# default_image_display_fov = 5.0

# Logging verbosity: one of {DEBUG, INFO, WARN, ERROR, or CRITICAL}
# logging_level = INFO

# Enable additional verbose printout of computation times. Useful for
# benchmarking.
# enable_speed_tests = False

# Enable additional verbose printout of fluxes and flux conservation during
# calculations. Useful for testing.
# enable_flux_tests = False
